\documentclass{article}
\usepackage[T1]{fontenc}
\usepackage{datetime}
\usepackage[margin=1in]{geometry}

\newcommand{\qu}[1]{``#1''}%

\title{Simulation Result Report}
\author{Adam Kapelner}
\date{\today, \currenttime}

\begin{document}
\maketitle

<<load_packages_and_setup_knitr, include=FALSE>>=
graphics.off()
#First we load up the packages we need and set knitr options:
options(repos = structure(c(CRAN = "http://lib.stat.cmu.edu/R/CRAN/")))
tryCatch(library(ggplot2), 
		error = function(e){install.packages("ggplot2")}, 
		finally = library(ggplot2))
tryCatch(library(xtable), 
		error = function(e){install.packages("xtable")}, 
		finally = library(xtable))

DEFAULT_COLORVEC = c("red", "green", "blue", "yellow2", "black", "violetred4", "cyan", "darkgrey", "orange2", "bisque3")
DEFAULT_OFFSETS = sample(seq(-0.2, 0.2, 0.005))

setwd("C:\\Users\\kapelner\\workspace\\GreedyExperimentalDesign\\reports")
@

\section{Results for each Run}

<<load_and_cleanup_data, fig.width = 7, fig.height = 6, echo=FALSE>>=
Xraw = read.csv("all_results2.csv")

#we don't need max_iterss since we went to Infinity always
Xraw$max_iters = NULL
table(Xraw$n) #num_samples
table(Xraw$p) #dimension
table(Xraw$dataset) #dataset

ns = sort(unique(Xraw$n))
ps = sort(unique(Xraw$p))
ds = sort(unique(Xraw$d))
rs = seq(from = 1, to = 200, by = 3)

slope_int_res = matrix(NA, nrow = 0, ncol = 4)
slope_int_res = data.frame(slope_int_res)


plot = FALSE


for (p in ps){
	#all plots are on same scale!

	Xp = Xraw[Xraw$p == p, ]
	cat("p =", p, "\n\n\n")
	
	for (r in rs){
		if (plot){
			windows()
			plot(log(Xraw$n), log(Xraw$val), type = "n", xlab = "n", ylab = "ln(balance)", xaxt = "n", main = paste("p =", p, " r = ", r))
			axis(1, at = log(Xraw$n), labels = exp(log(Xraw$n)))
		}
		#now we have to generate the dataset
		Xpr = matrix(NA, nrow = 0, ncol = 4)
		colnames(Xpr) = colnames(Xraw)
		for (n in ns){
			for (d in ds){
				Xpdn = Xp[Xp$d == d & Xp$n == n, ]
				#this is already in minimum order, thus we need to randomize the order
				Xpdn = Xpdn[sample(1 : nrow(Xpdn)), ]
				Xpr = rbind(Xpr, c(n, p, d, min(Xpdn[1 : r, ]$val)))
			}
		}
		Xpr = data.frame(Xpr)
		
		x = Xpr$n
		y = Xpr$val
		lnx = log(x)
		lny = log(y)		
		cat("\nexamine log-log linear regression\n")		
		lm_mod = lm(lny ~ lnx)
		print(coef(summary(lm_mod)))		
			
		
		if (plot){
			abline(lm_mod)
			for (d in ds){
				Xprd = Xpr[Xpr$d == d, ]
				lnxd = log(Xprd[Xprd$d == d, ]$n)
				lnyd = log(Xprd[Xprd$d == d, ]$val)
				points(lnxd + DEFAULT_OFFSETS[d], lnyd, col = DEFAULT_COLORVEC[d %% length(DEFAULT_COLORVEC)], pch = 16, cex = 0.33)
			}
		}
		
		#record results
		
		slope_int_res = rbind(slope_int_res, c(p, r, coef(summary(lm_mod))[, 1]))		
	}
	
	cat("does r affect rate for p =", p, "?\n")
	colnames(slope_int_res) = c("p", "r", "int", "slope")
	plot(slope_int_res$r, slope_int_res$slope)
	
	plot(slope_int_res$r, slope_int_res$int)
}
@

\section{Multiple and Rate Results over all Runs}

<<results_table, results="asis", echo=FALSE, fig.width = 5, fig.height = 5>>=
slope_int_res = data.frame(slope_int_res)
xtable(slope_int_res, digits = 4)


slope_int_res_inf = slope_int_res
plot(slope_int_res_inf$p, -slope_int_res_inf$slope, type = "o", xlab = "p", ylab = "-rate")
plot(log(slope_int_res_inf$p), log(-slope_int_res_inf$slope), type = "o", xlab = "ln(p)", ylab = "ln(-rate)")
@
\end{document}


library(knitr)
if (Sys.info()['sysname'] == "Windows"){
  setwd("C:\\Users\\kapelner\\workspace\\GreedyExperimentalDesign\\reports")
}
knit("sim_results.Rnw")
system("pdflatex sim_results.tex")
system("open sim_results.pdf")